#!/usr/bin/env bash

USAGE="Usage: $0 on/off [-hs]"

[ $# = 0 ] && networksetup -getairportpower en0
! [ $# = 1 ] && echo "$USAGE" && exit

case $1 in
    -h|--help)
        echo "Options:"
        echo "on              Turn wifi airport on."
        echo "off             Turn wifi airport off."
        echo "-h|--help       Show brief help."
        echo "-s|--select     Select and join one of the networks."
        exit 0
        ;;
    on)
        networksetup -setairportpower en0 on
        exit 0
        ;;
    off)
        networksetup -setairportpower en0 off
        exit 0
        ;;
    -s|--select)
        networks=($(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -s | awk ' NR>1{print $1} '))
        if [ ${#networks[@]} = 0 ]; then
            echo "Unable to recover networks. Check if the airport is active." && exit 1
        fi
        noNetwork=0
        for network in "${networks[@]}"
        do
            echo "[$noNetwork] $network"
            (( noNetwork++ ))
        done
        (( noNetwork-- ))
        echo " "
        echo "Enter a number between 0 and $noNetwork or type 'q' to exit."
        while true
        do
            read -p ">>> " num
            [ "$num" = "q" ] && echo "Exiting..." && exit 0
            if [ "$num" -ge 0 ] && [ "$num" -le "$noNetwork" ] && [ "$num" -eq "$num" ]
                then
                    echo "You selected: ${networks[$num]}"
                    break
            fi
        done
        pass=$(security find-generic-password -wa "${networks[$num]}" 2> /dev/null)
        if [ -z "$pass" ]; then
            echo "Unable to find password for ${networks[$num]}. Exiting..."
            exit 1
        fi
        networksetup -setairportnetwork en0 "${networks[$num]}" "$pass" | [ "$(awk 'NR==1{print $1}')" == "Failed" ] && echo "Unable to join ${networks[$num]}. Exiting..." && exit 1
        ;;
    *) echo "$USAGE"
esac

#!/bin/sh

editor="${EDITOR:-vi}"
zettel_dir="$HOME/zettel"
fuzzy="fzf"
usage='USAGE:
	zet [-h]
	zetf [-h]
	zetp [-h] [strings ...]
	zetg [-h] [strings ...]

	Manage your Zettelkasten with one shell script.


Zet will prompt you for the name of a Zettelkasten entry.

Zetf will let you browse through the existing entries with fzf.

Zetp takes positional arguments or reads from STDIN and prints out
matching Zettelkasten entry file names.

Zetg takes positional arguments or reads from STDIN and prints out
file names with contents matching one or more arguments.

EXAMPLES:
	zetp sql
	zetg shell
	echo "sql shell" | zetp
	echo "shell sql" | zetg
'

create_entry () {
	printf "Enter a name: "; read -r name
	test -z "$name" && echo 'name cannot be empty' && exit 1
	d=$(date "+%Y%m%d%H%M%S")
	mkdir -p "$zettel_dir"
	file="$zettel_dir/$d-$name"
	touch "$file"
	echo "# $name" | tr "-" " " > "$file"
	"$editor" "$file"
}

paste_links() {
	if [ "$#" -gt 0 ]; then
		for arg in "$@"; do
			find "$zettel_dir" -maxdepth 2 -type f\
				| grep "$arg"
		done
	else
		while read -r line; do
			for arg in $line; do
				find "$zettel_dir" -maxdepth 2 -type f\
					| grep "$arg"
			done
		done < "/dev/stdin"
	fi
}

grep_links() {
	if [ "$#" -gt 0 ]; then
		for arg in "$@"; do
			find "$zettel_dir" -maxdepth 2 -type f -exec grep -l "$arg" {} +\
			&& exit 0
		done
	else
		while read -r line; do
			for arg in $line;  do
				find "$zettel_dir" -maxdepth 2 -type f -exec grep -l "$arg" {} +
			done
		done < "/dev/stdin"
	fi
}

! command -v "$fuzzy" > "/dev/null" && echo "$fuzzy was not found zetf won't work." && exit 1

test "$1" = "--help" -o "$1" = "-h" && echo "$usage" && exit 0

test "${0##*/}" = zetp && paste_links "$@" && exit 0

test "${0##*/}" = zet && create_entry

test "${0##*/}" = zetf && \
	find "$zettel_dir" -maxdepth 2 -type f\
		| fzf-tmux --preview 'cat {}'\
		| xargs -I {} "$editor" "{}"\
		&& exit 0

test "${0##*/}" = zetg && grep_links "$@" && exit 0

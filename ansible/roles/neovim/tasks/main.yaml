---
- name: Install Neovim
  tags: neovim
  become_user: "{{ user }}"
  block:
    - name: Install Neovim on MacOS with Homebrew
      import_tasks: macos.yaml
      when: ansible_distribution == "MacOSX"

    - name: Confirm that Git available
      command: git version
      register: git_exists
      check_mode: false
      changed_when: false
      failed_when: git_exists.rc != 0

    - name: Ensure Pyenv is available
      command: pyenv version
      register: pyenv_exists
      check_mode: false
      changed_when: false
      failed_when: pyenv_exists.rc != 0

    - name: Ensure dedicated Python virtual environment is created with Pyenv
      command: pyenv virtualenv neovim
      check_mode: false
      changed_when: false
      ignore_errors: true
      when: pyenv_exists.rc == 0

    - name: Register the path to the Pyenv rot directory
      command: pyenv root
      register: pyenv_root
      check_mode: false
      changed_when: false
      when: pyenv_exists.rc == 0

    - name: >-
        Register the path to the Python interpreter from the virtual environment
        created with Pyenv
      set_fact:
        pyenv_neovim_env_exec: "{{ pyenv_root.stdout }}/versions/neovim/bin/python3"
      when: pyenv_exists.rc == 0

    - name: >-
        Make sure that pynvim Python package is installed in the provided
        virtual environment
      command: "{{ pyenv_neovim_env_exec }} -m pip install pynvim"
      register: pynvim_install_result
      check_mode: false
      changed_when: false
      failed_when: pynvim_install_result.rc != 0

    - name: Confirm that Node is available
      command: node --version
      register: node_exists
      check_mode: false
      changed_when: false
      failed_when: node_exists.rc != 0

    - name: Ensure that Neovim configuration directory is present
      file:
        path: "{{ neovim_config_dir }}"
        state: directory
        mode: u=+rwx,g=+r-wx,o=+r-wx

    - name: Ensure Neovim configuration file is available
      template:
        src: templates/init.vim.j2
        dest: "{{ neovim_config_dir }}/init.vim"
        mode: u=+rwx,g=+r-wx,o=+r-wx

    - name: Make sure the plugin directory is present
      file:
        path: "{{ neovim_config_dir }}/plugged"
        state: directory
        mode: u=+rwx,g=+r-wx,o=+r-wx

    - name: Install Vim Plug plugin manager for Neovim
      command: >-
        curl -fLo "{{ neovim_config_dir }}/autoload/plug.vim"
        --create-dirs
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      register: vim_plug_install_result
      check_mode: false
      changed_when: false
      failed_when: vim_plug_install_result.rc != 0

    - name: Install Neovim plugins
      command: nvim --headless +PlugInstall +qall
      register: nvim_plugins_install_result
      check_mode: false
      changed_when: false
      failed_when: nvim_plugins_install_result.rc != 0

    - name: Make sure Ripgrep is installed
      command: rg --version
      register: rg_exists
      check_mode: false
      changed_when: false
      failed_when: rg_exists.rc != 0

    - name: Make sure Fd is installed
      command: fd --version
      register: fd_exists
      check_mode: false
      changed_when: false
      failed_when: fd_exists.rc != 0

    # - name: Install required LSP servers
...
